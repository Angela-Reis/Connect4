/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package connect4.app;

import connect4.Connect4Exception;
import connect4.Connect4Listener;
import connect4.classes.board.GraphicBoard;
import connect4.classes.connect4game.GraphicConnect4Game;
import connect4.classes.piece.GraphicPiece;
import connect4.classes.piece.Piece;
import connect4.enums.Language;
import connect4.enums.Text;
import java.awt.Font;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import static javax.swing.JFileChooser.SAVE_DIALOG;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.TitledBorder;

/**
 *
 * @author Angela
 */
public class Connect4GUI extends javax.swing.JFrame implements Connect4Listener {

    private GraphicConnect4Game game;
    private Language language;

    /**
     * Creates new form Connect4GUI
     */
    public Connect4GUI() {
        //set icon of app to a connect4 symbol
        setIconImage(new ImageIcon(getClass().getResource("/connect4/multimedia/icon.png")).getImage());
        try {
            game = new GraphicConnect4Game(this);
        } catch (Connect4Exception ex) {
            ex.showErrorDialog(this, language);
        }

        initComponents();

        setGameOcurring(false);

        //sets the language of the application
        setLanguage(Language.ENGLISH);

        getGameBoard().showBoard();
        revalidate();
    }

    //receives enum Text and returns a String in the language of the application
    private String textToLanguage(Text t) {
        return t.toLanguage(language);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panelButton = new javax.swing.JPanel();
        btnNewGame = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        panelActivePlayer = new javax.swing.JPanel();
        panelGame = game.getMyBoard();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuAbout = new javax.swing.JMenu();
        menuItRules = new javax.swing.JMenuItem();
        menuItAbout = new javax.swing.JMenuItem();
        menuSettings = new javax.swing.JMenu();
        menuItLanguage = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Kings Connect4 ");
        setBackground(new java.awt.Color(51, 51, 255));
        setMinimumSize(new java.awt.Dimension(750, 800));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        panelButton.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        panelButton.setMinimumSize(new java.awt.Dimension(220, 200));

        btnNewGame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/connect4/multimedia/restart.png"))); // NOI18N
        btnNewGame.setText("New Game");
        btnNewGame.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btnNewGame.setIconTextGap(10);
        btnNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewGameActionPerformed(evt);
            }
        });

        btnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/connect4/multimedia/exit.png"))); // NOI18N
        btnExit.setText("Exit");
        btnExit.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        btnExit.setIconTextGap(10);
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        panelActivePlayer.setBackground(new java.awt.Color(204, 204, 204));
        panelActivePlayer.setBorder(javax.swing.BorderFactory.createTitledBorder("Current Player"));
        panelActivePlayer.setLayout(new java.awt.GridLayout(1, 0));

        javax.swing.GroupLayout panelButtonLayout = new javax.swing.GroupLayout(panelButton);
        panelButton.setLayout(panelButtonLayout);
        panelButtonLayout.setHorizontalGroup(
            panelButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelButtonLayout.createSequentialGroup()
                .addGroup(panelButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelButtonLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnNewGame, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)))
                    .addGroup(panelButtonLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(panelActivePlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelButtonLayout.setVerticalGroup(
            panelButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelButtonLayout.createSequentialGroup()
                .addContainerGap(125, Short.MAX_VALUE)
                .addComponent(panelActivePlayer, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(btnNewGame, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        getContentPane().add(panelButton, gridBagConstraints);

        panelGame.setBackground(new java.awt.Color(51, 51, 255));

        javax.swing.GroupLayout panelGameLayout = new javax.swing.GroupLayout(panelGame);
        panelGame.setLayout(panelGameLayout);
        panelGameLayout.setHorizontalGroup(
            panelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 419, Short.MAX_VALUE)
        );
        panelGameLayout.setVerticalGroup(
            panelGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 427, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(panelGame, gridBagConstraints);

        menuAbout.setText("About");

        menuItRules.setText("Rules");
        menuItRules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItRulesActionPerformed(evt);
            }
        });
        menuAbout.add(menuItRules);

        menuItAbout.setText("About");
        menuItAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItAboutActionPerformed(evt);
            }
        });
        menuAbout.add(menuItAbout);

        jMenuBar1.add(menuAbout);

        menuSettings.setText("Settings");

        menuItLanguage.setText("Language");
        menuItLanguage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItLanguageActionPerformed(evt);
            }
        });
        menuSettings.add(menuItLanguage);

        jMenuBar1.add(menuSettings);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItAboutActionPerformed
        new InfoDialog(this, textToLanguage(Text.ABOUT), textToLanguage(Text.ABOUTTEXT)).setVisible(true);
    }//GEN-LAST:event_menuItAboutActionPerformed

    private void menuItRulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItRulesActionPerformed
        new InfoDialog(this, textToLanguage(Text.RULES), textToLanguage(Text.RULESTEXT)).setVisible(true);

    }//GEN-LAST:event_menuItRulesActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        //shows a dialog confirming that the user wants to close the app
        int option = JOptionPane.showConfirmDialog(this,
                textToLanguage(Text.CONFIRMEXIT),
                textToLanguage(Text.EXIT),
                JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            dispose();
        }
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewGameActionPerformed

        if (game.isGameOccurring()) {
            //if game is occurring calls the new Game function that asks for confirmation
            newGame();
        } else {
            //if game is not occurring starts new game
            try {
                setGameOcurring(true);
                game.restart();
                updateActivePlayerPanel();
                getGameBoard().showBoard();
            } catch (Connect4Exception ex) {
                ex.showErrorDialog(this, language);
            }
        }
    }//GEN-LAST:event_btnNewGameActionPerformed

    private void menuItLanguageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItLanguageActionPerformed
        //opens a dialog with a combo box to select the language with ok and cancel
        JComboBox comboLanguages = new JComboBox(Language.values());
        comboLanguages.setSelectedIndex(language.ordinal());
        String txt = textToLanguage(Text.LANGUAGE);
        JPanel panel = new JPanel();
        panel.add(new JLabel(txt + ": "));
        panel.add(comboLanguages);
        int response = JOptionPane.showConfirmDialog(this, panel, txt, JOptionPane.OK_CANCEL_OPTION);
        if (response == JOptionPane.YES_OPTION) {
            setLanguage((Language) comboLanguages.getSelectedItem());
        }
    }//GEN-LAST:event_menuItLanguageActionPerformed

    //it's not used because game.save does not work
    public void saveFile() {
        //File chooser starts in the directory of the application
        JFileChooser fileChooser = new JFileChooser(new File("").getAbsolutePath()) {
            @Override
            public void approveSelection() {
                //checks if file name selected by the user to save already exist
                if (getSelectedFile().exists() && getDialogType() == SAVE_DIALOG) {
                    int optionPane = JOptionPane.showConfirmDialog(this,
                            textToLanguage(Text.CONFIRMOVERWRITE), textToLanguage(Text.FILEEXISTING),
                            JOptionPane.OK_CANCEL_OPTION);
                    if (optionPane == JOptionPane.OK_OPTION) {
                        super.approveSelection();
                    }
                } else {
                    super.approveSelection();
                }
            }
        };
        int optionChooser = fileChooser.showSaveDialog(this);

        if (optionChooser == JFileChooser.APPROVE_OPTION) {
            try {
                game.save(fileChooser.getSelectedFile().getAbsolutePath());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this,
                        ex.getMessage(),
                        connect4.enums.Error.ERROR.toLanguage(language),
                        JOptionPane.ERROR_MESSAGE);
            } catch (Connect4Exception ex) {
                Logger.getLogger(Connect4GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    //it's not used because game.load does not work
    public void loadGame() {
        JFileChooser fileChooser = new JFileChooser(new File("").getAbsolutePath());
        int optionChooser = fileChooser.showOpenDialog(this);
        if (optionChooser == JFileChooser.APPROVE_OPTION) {
            try {
                if (game.isGameOccurring()) {
                    if (confirmDialog(textToLanguage(Text.CONFIRMNEWGAME), textToLanguage(Text.CONFIRM))) {
                        game.load(fileChooser.getSelectedFile().getAbsolutePath());
                        setGameOcurring(true);
                    }
                } else {
                    game.load(fileChooser.getSelectedFile().getAbsolutePath());
                    setGameOcurring(true);
                }
            } catch (IOException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this,
                        ex.getMessage(),
                        connect4.enums.Error.ERROR.toLanguage(language),
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    //changes the language of the jframe components
    public void setLanguage(Language l) {
        language = l;
        menuSettings.setText(textToLanguage(Text.SETTINGS));
        menuItLanguage.setText(textToLanguage(Text.LANGUAGE));
        menuAbout.setText(textToLanguage(Text.ABOUT));
        menuItAbout.setText(textToLanguage(Text.ABOUT));
        menuItRules.setText(textToLanguage(Text.RULES));
        panelActivePlayer.setBorder(new TitledBorder(textToLanguage(Text.CURRENTPLAYER)));
        btnNewGame.setText(textToLanguage(Text.NEWGAME));
        // btnSave.setText(textToLanguage(Text.SAVE));
        // btnLoad.setText(textToLanguage(Text.LOAD));
        btnExit.setText(textToLanguage(Text.EXIT));

    }

    public final void setGameOcurring(boolean ocurring) {
        //set buttons related to game only when game is ocurring
        game.setGameOccurring(ocurring);
        //btnSave.setEnabled(ocurring);
    }

    public GraphicPiece getActivePlayerGraphic() {
        //returns GraphicPiece that expands JPanel
        return (GraphicPiece) game.getActivePlayer();
    }

    public boolean confirmDialog(String message, String title) {
        //opens dialog to confirm something
        int result = JOptionPane.showConfirmDialog(this, message, title, JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            return true;
        }
        return false;
    }

    public void updateActivePlayerPanel() {
        //update the panel that shows the current player
        panelActivePlayer.removeAll();
        if (game.isGameOccurring()) {
            GraphicPiece player = getActivePlayerGraphic();
            player.setFont(new Font("Verdana", Font.BOLD, getWidth() / 50));
            panelActivePlayer.add(player);
            panelActivePlayer.repaint();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Connect4GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Connect4GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Connect4GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Connect4GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Connect4GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnNewGame;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu menuAbout;
    private javax.swing.JMenuItem menuItAbout;
    private javax.swing.JMenuItem menuItLanguage;
    private javax.swing.JMenuItem menuItRules;
    private javax.swing.JMenu menuSettings;
    private javax.swing.JPanel panelActivePlayer;
    private javax.swing.JPanel panelButton;
    private javax.swing.JPanel panelGame;
    // End of variables declaration//GEN-END:variables

    public GraphicBoard getGameBoard() {
        //returns game Board if it's a graphic Board
        if (game.getMyBoard() instanceof GraphicBoard) {
            return (GraphicBoard) game.getMyBoard();
        }
        return null;
    }

    //--------------------------------------------------------------------------------------
    //methods of Connect4Listener
    @Override
    public void newGame() {
        try {
            //dialog to ask if user wants to start a new game
            if (confirmDialog(textToLanguage(Text.CONFIRMNEWGAME),
                    textToLanguage(Text.CONFIRM))) {
                setGameOcurring(true);
                game.restart();
                getGameBoard().showBoard();
            }
            updateActivePlayerPanel();

        } catch (Connect4Exception ex) {
            ex.showErrorDialog(this, language);
        }
    }

    @Override
    public GraphicConnect4Game getGame() {
        return game;
    }

    @Override
    public void configureGame(int width, int height, int numPiecesWin) {
        try {
            getGameBoard().setBoardSize(width, height);
            getGameBoard().setNumPiecesWin(numPiecesWin);
        } catch (Connect4Exception ex) {
            ex.showErrorDialog(this, language);
        }
    }

    @Override
    public Language getLanguage() {
        return language;
    }

    @Override
    public void playListener(int x) {
        try {
            //plays piece into column x
            game.playPiece(x);
            updateActivePlayerPanel();
        } catch (Connect4Exception ex) {
            ex.showErrorDialog(this, language);
        }

    }

    @Override
    public void configurePlayers(ArrayList<Piece> players) {
        try {
            game.setPlayers(players);
        } catch (Connect4Exception ex) {
            JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    connect4.enums.Error.ERROR.toLanguage(language),
                    JOptionPane.ERROR_MESSAGE);
        }
    }
}
